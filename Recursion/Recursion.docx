递归
八皇后问题：如何能够在 8×8 的国际象棋棋盘上放置八个皇后，使得任何一个皇后都无法直接吃掉其他的皇后？
国际象棋棋盘：
第一，国际象棋盘的存储实现：
		8*8的二维数组
第二，方法为尝试和回溯：一旦某一行失败，则应回溯到上一行
第三，如何判定某一位置是安全的
第四，如何输出某一种解答

处理步骤：第i行：（j从0～7）
1、检测[i][j]是否安全；(若不安全则转到第5步)；
2、安全：设置该位置为一个皇后[i][j]=1；
3、处理第i+1行；
4、处理完i+1行，即，处理完所有行后，将本位置的皇后去掉！！！ [i][j]=0;
5、j++，转到第1步

处理第i行：
       for(j = 0; j < 8; j++){
            if(queen[i][j]是安全的)
             {
                   queen[i][j] = 1;
                   处理下一行；
                   queen[i][j] = 0;
             }
       }



递归结束的时机：
编写递归程序，首先要处理结束的问题，而非调用的问题
eightQueen(int (*queen[RANGE]), int row){
	if(row >= RANG)
		显示结果；
	else
		处理本行；
}

全排列：
设有m个字符（暂时选择数字）,从其中挑选出n个字符，要求给出这些字符的全排列的所有情形。
1 2 3 4 5 6 7
0 0 0 0 0 0 0 
要求选2个数字进行全排列
- - - - 
1 
2
char s[M] = {0};
char res[N];
int i;

第i列应该做什么？
for(j = 0; j < M; j++)
{
  if(s[j] == 0)
  {

    s[j] = 1;
    res[i] = j +’A’;
    处理第i+1列；
    s[j] = 0;
  }
}


